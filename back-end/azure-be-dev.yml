trigger:
  batch: true
  branches:
   include:
     - dev
  paths:
    include:
      - back-end

pool: Default
#  vmImage: ubuntu-20.04

variables:
- name: testpath
  value: back-end

steps:

#- script: VERSION_TAG=`git tag --sort=-creatordate` && echo "##vso[task.setvariable variable=VERSION_TAG]$VERSION_TAG"
- script: VERSION_TAG=`git describe --tags` && echo "##vso[task.setvariable variable=VERSION_TAG]$VERSION_TAG"
  displayName: Define VERSION_TAG variable

- script: |
    res=0
    for file in $( find ${{ variables.testpath }} -type f -name '*.php' ); do
      php -l "$file" || res=1
    done
    if [ $res != 0 ]; then echo "##vso[task.logissue type=error]PHP syntax error."
    else
      echo "$VERSION_TAG">version_tag
    fi
    exit $res
  displayName: Lint PHP files

- task: SonarQubePrepare@4
  inputs:
    SonarQube: 'sonar'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: 'nhl'
    cliSources: './back-end'
- script: |
    echo "$SONARQUBE_SCANNER_PARAMS"
    params=`echo "$SONARQUBE_SCANNER_PARAMS" | sed 's/"sonar.branch.name":"[-a-z0-9/]*",//ig'`
    echo "$params"
    echo "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS]$params"
  displayName: Define SONARQUBE_SCANNER_PARAMS variable
- task: SonarQubeAnalyze@4
- task: SonarQubePublish@4
  inputs:
    pollingTimeoutSec: '300'

- script: |
    mkdir /root/.docker
    echo "{\"auths\":{\"$(acr-host)\":{\"auth\":\"`echo -n "$(acr-user):$(acr-pass)" | base64 -w0`\"}}}" >/root/.docker/config.json
    export DOCKERCONFIG=/root/.docker
    buildctl build --frontend=dockerfile.v0 --local context=back-end --local dockerfile=back-end --output type=image,name=$(acr-host)/nhl_be_dev:$VERSION_TAG,push=true
  displayName: Build and push image

- task: PublishPipelineArtifact@1
  inputs:
    targetPath: 'version_tag'
    artifact: 'version_tag'
    publishLocation: 'pipeline'
